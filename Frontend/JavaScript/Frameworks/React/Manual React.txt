1.Что такое React?
==================================================================================================
React - это библиотека JS. Нужна для создания пользовательского интерфейса(того, что мы видим на экране).

React работает на DOM архитектуре. Мы пишем, как должен выглядеть проект, а React дорабатывает его до такого
состояния, чтобы он был очень быстрый и советстовал нашим ожиданиям.

React использует синтаксическое расширение JavaScript, которое называется jsx. Все, что мы видим на экране
редактора построенно с помощью jsx, которое позволяет писать html код внутри JavaScript.

JSX должен возвращать только один элемент. Несколько элементов без родительского рендериться не будут.

2.Требования для работы с React:
==================================================================================================
1.Установить npm.
2.Установить yarn.
3.Установить Node.js.

3.Запуск React
==================================================================================================
yarn create react-app названиепроекта - создает проект react внутри папки.
yarn start - запуск проекта.


4.Структура React
==================================================================================================
1.node_modules - модули Node.js.
2.public - содержит файл index.html, картинки и вспомогательные файлы.
3.src - основные компоненты React.
4..gitignore - файл игнорирования.
5.package.json - центральный репозиторий конфигурации для инструментов.
6.README.md - инструкция для приложения.
7.yarn.lock - Это дополнительный файл, который генерируется автоматически и хранит в себе полное дерево
всех зависимостей с версиями. И после его генерации все пакеты устанавливаются по новой с версиями и зависимостями,
которые там указаны.

4.1 Компоненты public
==================================================================================================
1.index.html - основной html файл проекта.
React обращается к нему через <div id="root"></div> по id. В нем будет идти все отображение.
2.manifest.json - Файл манифеста содержит информацию об иконках, цветовой теме, ориентации экрана,
начальном URL и т.д. Используется для создания виджета в закладках браузеров.
3.robots.txt - В файле robots.txt содержатся инструкции, которые говорят поисковым роботам,
какие URL на вашем сайте им разрешено обрабатывать. 
С его помощью можно ограничить количество запросов на сканирование и тем самым снизить нагрузку на сайт.

4.2 Компоненты src
==================================================================================================
1.App.css - файл стилей приложения App.
2.index.css - основной файл стилей.(в нем прописываются базовые css стили).

3.App.js - базовое приложение, к которому чаще всего привязывают другие.
4.index.js - получает файлы блока из файла index.html. Также сюда рендериться компонент App.

5.App.test.js -
6.reportWebVitals.js -
7.setupTests.js - 

5.Компоненты.
==================================================================================================

React разбивает HTML страницу на компоненты(компонент menu, navbar и т.д.), чтобы с ними было
легче работать, соединять и разбивать.
Компоненты аналогичны во многом функциям из JS. Они хранят состояние с помощью свойств и возвращают
элемент React, который затем появится на Web-странице.

Название компонентов должно начинаться с большой буквы. Названия могут быть любыми.

Компоненты бывают трех типов:
==================================================================================================
1.Функциональный компонент.(rfc - снипет для создания).
После создания компонента внутри него создается:

export default function Fcomponent() - прописывается, чтобы этот компонент можно определить
в другом компоненте.

2.Классовый компонент.(rсс - снипет для создания).
3.Компонент с использованием стрелочной функции.(rafc - снипет для создания).

ВАЖНО!!!
==================================================================================================
При попытке экспорта по default, когда мы только создаем файл надо экспорт поместить вниз приложения. Пример:

import React from 'react'

const Menu = () => {
  return (
    <div>
        <h1>Arrow Function</h1>
    </div>
  )
}

export default Menu;

Чтобы работать с компонентами, необходимо их импортировать в файл App.js.
Компоненты можно импортировать в другие компоненты.

6.Props.
==================================================================================================
Props - это значения, которые мы хотим статически передать нашему компоненту.

Чтобы их использовать нужно указать значение в файле App.js, а также добавить props в конкретном компоненте.
Название свойств может быть любое, главное, чтобы они не были зарезервированы системой.

Пример:
1)Функциональный компонент:

import React from 'react'

export default function Fcomponent(props) {
  return (
    <div>
        <h1>Hello,{props.name} </h1>
    </div>
  )
}

Внутри App.js добавляем:

<Fcomponent name="Viktor"/>

2)Классовый компонент:

import React, { Component } from 'react'
import Menu from './Menu'

export default class Ccomponent extends Component {
  render() {
    return (
      <div>
        <h1>{this.props.number}</h1>
        <Menu/>
      </div>
    )
  }
}

Внутри App.js добавляем:

<Ccomponent number="18.09.1996"/>



3)Компонент со стрелочной функцией:

Также мы можем передать в props массив значений. Пример:

import React, { Component } from 'react'

export default class Ccomponent extends Component {
  render() {
    return (
      <div>
        <h1>{this.props.numbers.join(',')}</h1>
      </div>
    )
  }
}

Внутри App.js добавляем:

<Ccomponent numbers={[1,2,3,4,5]}/>

Если мы не указываем в App.js значение свойства props, то мы можем установить его по default. Пример:

import React, { Component } from 'react'
import Menu from './Menu'

export default class Ccomponent extends Component {
  render() {
    return (
      <div>
        <h1>{this.props.number}</h1>
        <Menu/>
      </div>
    )
  }
}

Ccomponent.defaultProps = {name: "Viktor"}

Внутри App.js:

<Ccomponent/>

В данном случае на экране появиться значение Viktor.
Если в App.js будет прописано новое значение name, то оно изменится на странице.

7.State
==================================================================================================
Props предоставляет входные данные, которые передаются в компонент извне.
State хранит такие объекты, которые создаются в компоненте и полностью зависят от самого компонента.
Также в отличии от Props, значение State можно изменять
State описывает визуальные свойства элемента, которые могут изменяться при взаимодействии с пользователем.
Например: нажали на кнопку и изменили цвет.

1)Первый способ добавить state:

Для того, чтобы использовать State создаем конструктор в компоненте и меняем props на state:

import React, { Component } from 'react'

export default class Ccomponent extends Component {
  constructor(props) {
    super(props)
  
    this.state = {
       name: "Viktor"
    }
  }
  render() {
    return (
      <div>
        <h1>{this.state.name}</h1>
      </div>
    )
  }
}

2)Второй способ добавить state:

import React, { Component } from 'react'

export default class Ccomponent extends Component {
  constructor(props) {
    super(props)
  
    this.state = {
       name: "Viktor"
    }
  }
  render() {
    const name = this.state.name;
    return (
      <div>
        <h1>{name}</h1>
      </div>
    )
  }
}

Смена имени на экране при нажатии на кнопку:

import React, { Component } from 'react'

export default class Ccomponent extends Component {
  constructor(props) {
    super(props)
  
    this.state = {
       name: "Viktor"
    };

    this.handleClick = this.handleClick.bind(this); - данная запись нужна, т.к. по умолчанию метод класса не привязан в JS к контексту.
  }

  handleClick(){ - функция обращается к конструктору со state и передает данные в заголовок h1.
    this.setState({
      name: "Max"
    })
  }
  render() {
    return (
      <div>
        <h1>{this.state.name}</h1>
        <button onClick={this.handleClick}>Click</button> - кнопка, при нажатии на которую срабатывает событие onClick. Оно обращается к функции handleClick.
      </div>
    )
  }
}

Методы класса используют ключевое слово this, чтобы он мог получить доступ к свойствам класса.

При нажатии на кнопку текст появляется или пропадает:

import React, { Component } from 'react'

export default class Ccomponent extends Component {
  constructor(props) {
    super(props)
  
    this.state = {
       visibility: false
    };

    this.handleClick = this.handleClick.bind(this);
  }

  handleClick(){
    this.setState(state =>({
      visibility: !state.visibility
    }));
  }
  render() {
      if (this.state.visibility){
    return (
      <div>
        <h1>Now you see me</h1>
        <button onClick={this.handleClick}>Click</button>
      </div>
    );
  } else {
    return(
    <div>
        <button onClick={this.handleClick}>Click</button>
    </div>
    )
  }
 }
}

Счетчик увеличения,уменьшения и сброса:

import React, { Component } from 'react'

export default class Ccomponent extends Component {
  constructor(props) {
    super(props)
  
    this.state = {
       count:0
    };

    this.increment = this.increment.bind(this);
    this.decrement = this.decrement.bind(this);
    this.reset = this.reset.bind(this);
  }

  increment(){
    this.setState(state =>({
      count: state.count+1
    }));
  }

  decrement(){
    this.setState(state =>({
      count: state.count-1
    }));
  }

  reset(){
    this.setState({
      count:0
    })
  }

  render() {
     return(
      <div>
        <button onClick={this.increment}>increment</button>
        <button onClick={this.decrement}>decrement</button>
        <button onClick={this.reset}>reset</button>
        <h1>Current: {this.state.count}</h1>
      </div>
     )
 }
}